{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "T4",
      "authorship_tag": "ABX9TyMma5K8z0i2ZMFrqklOfxCy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mudi260/AWS-Slides/blob/main/Copy_of_Frazer_Suzuki_deconvolution_Journal%20of%20Environmental%20Challenges\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.signal import find_peaks\n",
        "from scipy.optimize import curve_fit\n",
        "from scipy.stats import linregress\n",
        "from google.colab import files\n",
        "\n",
        "# Universal gas constant (J/mol·K)\n",
        "R = 8.314\n",
        "\n",
        "# Prompt for file upload\n",
        "print(\"Please upload 'Opitmization of copyrolysis_input.csv'\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Load the CSV file\n",
        "df = pd.read_csv('Opitmization of copyrolysis_input.csv')\n",
        "\n",
        "# Define temperature and alpha ranges\n",
        "temp_range = [150, 600]  # As requested: 150–600°C\n",
        "alpha_clip = [0, 1]  # Clip alpha to avoid numerical issues\n",
        "\n",
        "# Dataframe to store KAS results for each peak\n",
        "kas_results = []\n",
        "\n",
        "# Initialize storage for fitted parameters\n",
        "popt_storage = {}\n",
        "\n",
        "# Group by SCG% to process all heating rates for each SCG:FM ratio\n",
        "for scg, scg_group in df.groupby('SCG%'):\n",
        "    sample_name = f\"SCG:FM {int(scg)}:{int(100-scg)}\"\n",
        "    print(f\"\\nProcessing {sample_name} across all heating rates...\")\n",
        "\n",
        "    # Store data for KAS method across heating rates\n",
        "    component_data = {}  # Dictionary to store {component: [(hr, temp, alpha, peak_curve), ...]}\n",
        "    heating_rates = []\n",
        "\n",
        "    # Process each heating rate for the current SCG%\n",
        "    for hr, group in scg_group.groupby('Heating rate'):\n",
        "        print(f\"\\nProcessing {sample_name}, Heating rate {hr} K/min...\")\n",
        "\n",
        "        # Extract arrays\n",
        "        temp_c = group['Temperature'].values\n",
        "        tga = group['TGA'].values\n",
        "        dtg = group['DTG'].values  # Use experimental DTG from CSV\n",
        "\n",
        "        # Debug: Check lengths of raw data\n",
        "        print(f\"Raw data lengths - len(temp_c): {len(temp_c)}, len(tga): {len(tga)}, len(dtg): {len(dtg)}\")\n",
        "        if len(temp_c) != len(tga) or len(temp_c) != len(dtg):\n",
        "            print(f\"Length mismatch in raw data. Skipping.\")\n",
        "            continue\n",
        "\n",
        "        # Filter for the extended temperature range (150–600°C) and ensure finite values\n",
        "        mask = (temp_c >= temp_range[0]) & (temp_c <= temp_range[1]) & np.isfinite(temp_c) & np.isfinite(tga) & np.isfinite(dtg)\n",
        "        if not np.any(mask):\n",
        "            print(f\"No data in temperature range {temp_range[0]}–{temp_range[1]}°C. Skipping.\")\n",
        "            continue\n",
        "        temp_c_full = temp_c[mask]\n",
        "        tga_full = tga[mask]\n",
        "        dtg_full = dtg[mask]\n",
        "        temp_k_full = temp_c_full + 273.15\n",
        "\n",
        "        # Debug: Check lengths after temperature filter\n",
        "        print(f\"After temp filter - len(temp_c): {len(temp_c_full)}, len(tga): {len(tga_full)}, len(dtg): {len(dtg_full)}\")\n",
        "        if len(temp_c_full) != len(tga_full) or len(temp_c_full) != len(dtg_full):\n",
        "            print(f\"Length mismatch after temperature filter. Skipping.\")\n",
        "            continue\n",
        "\n",
        "        # Calculate conversion (α) for the full range\n",
        "        m0 = tga_full[0]\n",
        "        mf = tga_full[-1]\n",
        "        if m0 <= mf:\n",
        "            print(f\"Invalid mass loss - m0 ({m0}) <= mf ({mf}). Skipping.\")\n",
        "            continue\n",
        "        alpha_full = (m0 - tga_full) / (m0 - mf)\n",
        "        alpha_full = np.clip(alpha_full, alpha_clip[0], alpha_clip[1])\n",
        "\n",
        "        # Apply alpha filter for deconvolution (α >= 0.1)\n",
        "        mask_alpha = (alpha_full >= 0.1) & (alpha_full <= 1.0) & np.isfinite(alpha_full)\n",
        "        if not np.any(mask_alpha):\n",
        "            print(f\"No data for α ≥ 0.1. Alpha range: {alpha_full.min():.4f} to {alpha_full.max():.4f}. Skipping.\")\n",
        "            continue\n",
        "        alpha = alpha_full[mask_alpha]\n",
        "        temp_k = temp_k_full[mask_alpha]\n",
        "        temp_c = temp_c_full[mask_alpha]\n",
        "        tga = tga_full[mask_alpha]\n",
        "        dtg = dtg_full[mask_alpha]\n",
        "\n",
        "        # Debug: Check lengths after alpha filter\n",
        "        print(f\"After alpha filter - len(temp_c): {len(temp_c)}, len(tga): {len(tga)}, len(dtg): {len(dtg)}\")\n",
        "        if len(temp_c) != len(tga) or len(temp_c) != len(dtg):\n",
        "            print(f\"Length mismatch after alpha filter. Skipping.\")\n",
        "            continue\n",
        "\n",
        "        # Check for non-finite values in temp_c and dtg\n",
        "        if not np.all(np.isfinite(temp_c)) or not np.all(np.isfinite(dtg)):\n",
        "            print(f\"Non-finite values detected in temp_c or dtg after filtering. Skipping.\")\n",
        "            continue\n",
        "\n",
        "        # Ensure enough data points for processing\n",
        "        if len(dtg) < 3:\n",
        "            print(f\"Not enough data points after filtering (len(dtg) = {len(dtg)}). Skipping.\")\n",
        "            continue\n",
        "\n",
        "        # Fraser-Suzuki deconvolution\n",
        "        def fraser_suzuki(x, h, r, wr, sr):\n",
        "            arg = (x - r) * sr / wr\n",
        "            arg_safe = np.where(arg > -1, arg, -0.9999)  # Prevent log of negative numbers\n",
        "            term = np.log(1 + arg_safe)\n",
        "            exponent = -np.log(2) * (term / sr)**2\n",
        "            exponent = np.clip(exponent, -500, 500)  # Prevent overflow in exp\n",
        "            return h * np.exp(exponent)\n",
        "\n",
        "        def multi_fraser_suzuki(x, *params):\n",
        "            n_peaks = len(params) // 4  # 4 parameters per peak (h, r, wr, sr)\n",
        "            y = np.zeros_like(x, dtype=float)\n",
        "            for i in range(n_peaks):\n",
        "                y += fraser_suzuki(x, *params[i*4:i*4+4])\n",
        "            return y\n",
        "\n",
        "        # Set number of peaks and initial guesses based on decomposition ranges\n",
        "        n_peaks = 3 if scg > 0 else 1  # SCG: 3 peaks (hemicellulose, cellulose, lignin); FM: 1 peak\n",
        "        dtg_max = dtg.max()\n",
        "        initial_guesses = []\n",
        "        if scg > 0:\n",
        "            # Order: h, r, wr, sr\n",
        "            # Hemicellulose: 220–310°C\n",
        "            initial_guesses.extend([dtg_max * 0.3, 265, 30, 0.5])\n",
        "            # Cellulose: 250–400°C\n",
        "            initial_guesses.extend([dtg_max, 325, 30, 0.5])\n",
        "            # Lignin: 220–600°C\n",
        "            initial_guesses.extend([dtg_max * 0.4, 400, 100, 0.5])\n",
        "        if scg < 100:\n",
        "            if scg == 0:\n",
        "                # FM only: 460–480°C\n",
        "                initial_guesses = [dtg_max, 470, 20, 0.5]\n",
        "            else:\n",
        "                # FM in blends: 460–480°C\n",
        "                initial_guesses.extend([dtg_max * 0.5, 470, 20, 0.5])\n",
        "\n",
        "        # Define bounds for curve_fit based on decomposition ranges\n",
        "        bounds_lower = []\n",
        "        bounds_upper = []\n",
        "        if scg > 0:\n",
        "            # Hemicellulose: h, r, wr, sr\n",
        "            bounds_lower.extend([0, 220, 10, 0.1])\n",
        "            bounds_upper.extend([np.inf, 310, 50, 2.0])\n",
        "            # Cellulose: 250–400°C\n",
        "            bounds_lower.extend([0, 250, 10, 0.1])\n",
        "            bounds_upper.extend([np.inf, 400, 50, 2.0])\n",
        "            # Lignin: 220–600°C\n",
        "            bounds_lower.extend([0, 220, 50, 0.1])\n",
        "            bounds_upper.extend([np.inf, 600, 150, 2.0])\n",
        "        if scg < 100:\n",
        "            if scg == 0:\n",
        "                # FM only\n",
        "                bounds_lower = [0, 460, 10, 0.1]\n",
        "                bounds_upper = [np.inf, 480, 30, 2.0]\n",
        "            else:\n",
        "                # FM in blends\n",
        "                bounds_lower.extend([0, 460, 10, 0.1])\n",
        "                bounds_upper.extend([np.inf, 480, 30, 2.0])\n",
        "        bounds = (bounds_lower, bounds_upper)\n",
        "\n",
        "        try:\n",
        "            popt, _ = curve_fit(multi_fraser_suzuki, temp_c, dtg, p0=initial_guesses, bounds=bounds, maxfev=10000)\n",
        "            print(f\"{sample_name}: Fraser-Suzuki deconvolution successful at {hr} K/min.\")\n",
        "            component_labels = []\n",
        "            if scg > 0:\n",
        "                component_labels.extend(['Hemicellulose', 'Cellulose', 'Lignin'])\n",
        "            if scg < 100:\n",
        "                if scg == 0:\n",
        "                    component_labels = ['FM']\n",
        "                else:\n",
        "                    component_labels.append('FM')\n",
        "            for i in range(len(popt) // 4):\n",
        "                print(f\"Peak {i+1} ({component_labels[i]}): Height: {popt[i*4]:.4f}, Position: {popt[i*4+1]:.2f}°C, Width: {popt[i*4+2]:.2f}, Asymmetry: {popt[i*4+3]:.2f}\")\n",
        "\n",
        "            # Calculate R² to evaluate fit quality\n",
        "            fit = multi_fraser_suzuki(temp_c, *popt)\n",
        "            ss_res = np.sum((dtg - fit) ** 2)  # Residual sum of squares\n",
        "            ss_tot = np.sum((dtg - np.mean(dtg)) ** 2)  # Total sum of squares\n",
        "            r2 = 1 - (ss_res / ss_tot) if ss_tot != 0 else 0  # R² calculation\n",
        "            print(f\"R² for fit at {hr} K/min: {r2:.4f}\")\n",
        "\n",
        "            # Store the fitted parameters\n",
        "            popt_storage[(int(scg), int(hr))] = popt\n",
        "\n",
        "            # ... (rest of the code, including plotting and KAS analysis, remains the same) ...\n",
        "\n",
        "            # Generate a temperature array from 150 to 600°C for plotting and peak analysis\n",
        "            temp_c_plot = np.linspace(150, 600, len(temp_c_full))\n",
        "            deconvoluted_peaks = [fraser_suzuki(temp_c_plot, *popt[i*4:i*4+4]) for i in range(len(popt) // 4)]\n",
        "\n",
        "            # Map peaks to alpha ranges and collect data for KAS\n",
        "            for i, (peak, label) in enumerate(zip(deconvoluted_peaks, component_labels)):\n",
        "                # Determine temperature range where peak is significant (e.g., >5% of max height)\n",
        "                threshold = 0.05 * peak.max()\n",
        "                significant_indices = np.where(peak > threshold)[0]\n",
        "                if len(significant_indices) == 0:\n",
        "                    print(f\"Warning: No significant range found for {label} at {hr} K/min.\")\n",
        "                    continue\n",
        "                temp_start = temp_c_plot[significant_indices[0]]\n",
        "                temp_end = temp_c_plot[significant_indices[-1]]\n",
        "\n",
        "                # Map temperature range to alpha range using temp_c_full and alpha_full\n",
        "                alpha_mask = (temp_c_full >= temp_start) & (temp_c_full <= temp_end)\n",
        "                if not np.any(alpha_mask):\n",
        "                    print(f\"Warning: No alpha values found for {label} in range {temp_start:.1f}–{temp_end:.1f}°C at {hr} K/min.\")\n",
        "                    continue\n",
        "                alpha_range = (alpha_full[alpha_mask].min(), alpha_full[alpha_mask].max())\n",
        "                print(f\"{label} at {hr} K/min: Alpha range = {alpha_range[0]:.3f} to {alpha_range[1]:.3f}\")\n",
        "\n",
        "                # Store data for KAS method\n",
        "                if label not in component_data:\n",
        "                    component_data[label] = []\n",
        "                component_data[label].append((hr, temp_c_plot, alpha_full, peak))\n",
        "\n",
        "            heating_rates.append(hr)\n",
        "\n",
        "            # Plotting DTG deconvolution\n",
        "            plt.figure(figsize=(8, 6))\n",
        "            plt.plot(temp_c_full, dtg_full, 'ks', label='Experimental', markersize=4)\n",
        "            if scg == 0:\n",
        "                labels = ['P-FM']\n",
        "                colors = ['cyan']\n",
        "            elif scg == 100:\n",
        "                labels = ['P-HM', 'P-CE', 'P-LG']\n",
        "                colors = ['pink', 'yellow', 'lightgreen']\n",
        "            else:\n",
        "                labels = ['P-HM', 'P-CE', 'P-LG', 'P-FM']\n",
        "                colors = ['pink', 'yellow', 'lightgreen', 'cyan']\n",
        "            for i, (peak, label, color) in enumerate(zip(deconvoluted_peaks, labels[:len(deconvoluted_peaks)], colors)):\n",
        "                plt.fill_between(temp_c_plot, 0, peak, color=color, alpha=0.5, label=label)\n",
        "                peak_max_idx = np.argmax(peak)\n",
        "                plt.text(temp_c_plot[peak_max_idx], peak[peak_max_idx], f'Peak {i+1}', ha='center', va='bottom')\n",
        "            fit = multi_fraser_suzuki(temp_c_plot, *popt)\n",
        "            plt.plot(temp_c_plot, fit, 'g-', label='Fit')\n",
        "            plt.xlim(150, 600)\n",
        "            plt.xlabel('Temperature/°C')\n",
        "            plt.ylabel('dα/dt')\n",
        "            plt.title(f'DTG Deconvolution for {sample_name} at {hr} K/min')\n",
        "            plt.legend()\n",
        "            plt.grid(True)\n",
        "            filename = f'deconvolution_dtg_scg{int(scg)}_hr{int(hr)}.png'\n",
        "            plt.savefig(filename, dpi=300, bbox_inches='tight')\n",
        "            plt.show()\n",
        "            files.download(filename)\n",
        "####################################### END OF FRAIZER-SUZUKI DECONVOLUTION #################################################\n",
        "            # Apply KAS method for each component\n",
        "            print(f\"\\nApplying KAS method for {sample_name}...\")\n",
        "            for component, data_list in component_data.items():\n",
        "                if len(data_list) < 2:\n",
        "                    print(f\"Insufficient heating rates for {component} to apply KAS method (need at least 2).\")\n",
        "                    continue\n",
        "\n",
        "                # Determine the common alpha range for this component across all heating rates\n",
        "                alpha_ranges = []\n",
        "                for hr, temp_c_plot, alpha_full, peak in data_list:\n",
        "                    threshold = 0.05 * peak.max()\n",
        "                    significant_indices = np.where(peak > threshold)[0]\n",
        "                    if len(significant_indices) == 0:\n",
        "                        continue\n",
        "                    temp_start = temp_c_plot[significant_indices[0]]\n",
        "                    temp_end = temp_c_plot[significant_indices[-1]]\n",
        "                    alpha_mask = (temp_c_plot >= temp_start) & (temp_c_plot <= temp_end)\n",
        "                    alpha_range = (alpha_full[alpha_mask].min(), alpha_full[alpha_mask].max())\n",
        "                    alpha_ranges.append(alpha_range)\n",
        "\n",
        "                if not alpha_ranges:\n",
        "                    print(f\"No valid alpha ranges for {component}. Skipping KAS method.\")\n",
        "                    continue\n",
        "\n",
        "                # Find the intersection of alpha ranges (conservative approach)\n",
        "                alpha_min = max(ar[0] for ar in alpha_ranges)\n",
        "                alpha_max = min(ar[1] for ar in alpha_ranges)\n",
        "                if alpha_min >= alpha_max:\n",
        "                    print(f\"No overlapping alpha range for {component}. Skipping KAS method.\")\n",
        "                    continue\n",
        "\n",
        "                # Select alpha points for KAS analysis (e.g., every 0.05 within the range)\n",
        "                alpha_points = np.arange(alpha_min + 0.05, alpha_max, 0.05)\n",
        "                if len(alpha_points) == 0:\n",
        "                    print(f\"No alpha points selected for {component} in range {alpha_min:.3f} to {alpha_max:.3f}. Skipping.\")\n",
        "                    continue\n",
        "\n",
        "                # Apply KAS method at each alpha\n",
        "                for alpha_target in alpha_points:\n",
        "                    temps_at_alpha = []\n",
        "                    valid_hrs = []\n",
        "                    for hr, temp_c_plot, alpha_full, peak in data_list:\n",
        "                        # Find the temperature at which this alpha occurs on the deconvoluted peak\n",
        "                        peak_cumsum = np.cumsum(peak)\n",
        "                        if peak_cumsum[-1] == 0:\n",
        "                            continue\n",
        "                        peak_alpha = peak_cumsum / peak_cumsum[-1]  # Normalized cumulative peak as \"conversion\"\n",
        "                        idx = np.argmin(np.abs(peak_alpha - alpha_target))\n",
        "                        if idx == 0 or idx == len(peak_alpha) - 1:\n",
        "                            continue  # Skip if alpha_target is at the boundaries\n",
        "                        T_c = temp_c_plot[idx]\n",
        "                        T_k = T_c + 273.15\n",
        "                        temps_at_alpha.append(T_k)\n",
        "                        valid_hrs.append(hr)\n",
        "\n",
        "                    if len(temps_at_alpha) < 2:\n",
        "                        print(f\"Insufficient data points for {component} at α = {alpha_target:.3f}. Skipping.\")\n",
        "                        continue\n",
        "\n",
        "                    # KAS method: ln(beta/T^2) vs 1/T\n",
        "                    x = 1 / np.array(temps_at_alpha)  # 1/T (K^-1)\n",
        "                    y = np.log(np.array(valid_hrs) / np.array(temps_at_alpha)**2)  # ln(beta/T^2)\n",
        "                    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n",
        "                    Ea = -slope * R / 1000  # Ea in kJ/mol\n",
        "                    r2 = r_value**2\n",
        "\n",
        "                    print(f\"{component} at α = {alpha_target:.3f}: Ea = {Ea:.2f} kJ/mol (R² = {r2:.4f})\")\n",
        "\n",
        "                    # Store KAS result\n",
        "                    kas_results.append({\n",
        "                        'SCG:FM Ratio': sample_name,\n",
        "                        'Component': component,\n",
        "                        'Alpha': alpha_target,\n",
        "                        'Ea (kJ/mol)': Ea,\n",
        "                        'R²': r2\n",
        "                    })\n",
        "\n",
        "        except RuntimeError as e:\n",
        "            print(f\"{sample_name}: Fraser-Suzuki deconvolution failed at {hr} K/min: {e}. Skipping.\")\n",
        "            continue\n",
        "\n",
        "# Create and download CSV file with KAS results\n",
        "if kas_results:\n",
        "    kas_df = pd.DataFrame(kas_results)\n",
        "    csv_filename = 'peak_KAS_results.csv'\n",
        "    kas_df.to_csv(csv_filename, index=False)\n",
        "    print(f\"\\nDownloading {csv_filename}...\")\n",
        "    files.download(csv_filename)\n",
        "else:\n",
        "    print(\"\\nNo KAS results to export.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "_lhOG7qBI10n",
        "outputId": "291aff9c-c328-42ca-d182-011b5e994120"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload 'Opitmization of copyrolysis_input.csv'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8536ce61-8080-4818-bf0d-8ae5a7b49317\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8536ce61-8080-4818-bf0d-8ae5a7b49317\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'Opitmization of copyrolysis_input.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2018461623.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Load the CSV file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Opitmization of copyrolysis_input.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# Define temperature and alpha ranges\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'Opitmization of copyrolysis_input.csv'"
          ]
        }
      ]
    }
  ]
}